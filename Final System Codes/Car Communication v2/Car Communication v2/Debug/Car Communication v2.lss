
Car Communication v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000937  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061b  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000490  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000337  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_1>
   8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 99 00 	call	0x132	; 0x132 <main>
  74:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <system_setup>:
	}
}

void system_setup(void)
{
	DDRB |= (1 << U_OUT | 1 << IR_OUT | 1 << RF_TXD);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	87 60       	ori	r24, 0x07	; 7
  80:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << CONFIG);
  82:	bf 98       	cbi	0x17, 7	; 23
	
	DDRD |= (1 << U_TRIG | 1 << RF_TXD);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	86 60       	ori	r24, 0x06	; 6
  88:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << U_ECHO | 1 << IR);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	83 7f       	andi	r24, 0xF3	; 243
  8e:	81 bb       	out	0x11, r24	; 17
	
	PORTB |= (1 << CONFIG);
  90:	c7 9a       	sbi	0x18, 7	; 24
	
	GICR |= (1 << INT0 | 1 << INT1);
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC00 | 1 << ISC10);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	85 60       	ori	r24, 0x05	; 5
  9c:	85 bf       	out	0x35, r24	; 53
	
	TIMSK |= (1 << TOIE0);
  9e:	89 b7       	in	r24, 0x39	; 57
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	89 bf       	out	0x39, r24	; 57
	
	sei(); //Enabling Global Interrupts
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <ultrasonic>:
	t1_timer = 0;
}

int ultrasonic(void)
{
	ON(PORTD, BIT(U_TRIG));
  a8:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <ultrasonic+0x4>
  b0:	00 00       	nop
	_delay_us(10);
	OFF(PORTD, BIT(U_TRIG));
  b2:	91 98       	cbi	0x12, 1	; 18
	return t1_timer/58;
  b4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <t1_timer>
  b8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <t1_timer+0x1>
  bc:	6a e3       	ldi	r22, 0x3A	; 58
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	0e 94 89 01 	call	0x312	; 0x312 <__divmodhi4>
  c4:	cb 01       	movw	r24, r22
}
  c6:	08 95       	ret

000000c8 <config_system>:
	sei(); //Enabling Global Interrupts
}

void config_system(void)
{
	while (BIT_OFF(PINB, CONFIG))
  c8:	b7 99       	sbic	0x16, 7	; 22
  ca:	21 c0       	rjmp	.+66     	; 0x10e <config_system+0x46>
	{
		ul_distance = ultrasonic();
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <ultrasonic>
  d0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if (ul_distance < UL_CONDITION)
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	91 05       	cpc	r25, r1
  dc:	14 f4       	brge	.+4      	; 0xe2 <config_system+0x1a>
			OFF(PORTB, BIT(U_OUT));
  de:	c0 98       	cbi	0x18, 0	; 24
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <config_system+0x1c>
		else
			ON(PORTB, BIT(U_OUT));
  e2:	c0 9a       	sbi	0x18, 0	; 24
		
		if (BIT_OFF(PIND, IR))
  e4:	83 99       	sbic	0x10, 3	; 16
  e6:	02 c0       	rjmp	.+4      	; 0xec <config_system+0x24>
			OFF(PORTB, BIT(IR_OUT));
  e8:	c1 98       	cbi	0x18, 1	; 24
  ea:	01 c0       	rjmp	.+2      	; 0xee <config_system+0x26>
		else
			ON(PORTB, BIT(IR_OUT));
  ec:	c1 9a       	sbi	0x18, 1	; 24
		
		ON(PORTB, BIT(RF_TXD));
  ee:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	87 e5       	ldi	r24, 0x57	; 87
  f2:	9b e1       	ldi	r25, 0x1B	; 27
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <config_system+0x2c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <config_system+0x32>
  fa:	00 00       	nop
		DELAY_2;
		OFF(PORTB, BIT(RF_TXD));
  fc:	c2 98       	cbi	0x18, 2	; 24
  fe:	87 e5       	ldi	r24, 0x57	; 87
 100:	9b e1       	ldi	r25, 0x1B	; 27
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <config_system+0x3a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <config_system+0x40>
 108:	00 00       	nop
	sei(); //Enabling Global Interrupts
}

void config_system(void)
{
	while (BIT_OFF(PINB, CONFIG))
 10a:	b7 9b       	sbis	0x16, 7	; 22
 10c:	df cf       	rjmp	.-66     	; 0xcc <config_system+0x4>
		DELAY_2;
		OFF(PORTB, BIT(RF_TXD));
		DELAY_2;
	}
	
	TCCR0 = 0;
 10e:	13 be       	out	0x33, r1	; 51
	waiting_condition = 0;
 110:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <waiting_condition+0x1>
 114:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <waiting_condition>
	crossing_condition = 0;
 118:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <crossing_condition+0x1>
 11c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <crossing_condition>
	active = 0;
 120:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <active+0x1>
 124:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <active>
	t1_timer = 0;
 128:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <t1_timer+0x1>
 12c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <t1_timer>
 130:	08 95       	ret

00000132 <main>:
int ul_distance = 0;


int main(void)
{
	system_setup();
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <system_setup>
		{
			ul_distance = ultrasonic();
			
			if (ul_distance < UL_CONDITION && waiting_condition == 1)
			{
				crossing_condition = 1;
 136:	c1 e0       	ldi	r28, 0x01	; 1
 138:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	system_setup();
	while (1)
	{
		if (BIT_OFF(PINB, CONFIG))
 13a:	b7 99       	sbic	0x16, 7	; 22
 13c:	03 c0       	rjmp	.+6      	; 0x144 <main+0x12>
		{
			config_system();
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <config_system>
 142:	fb cf       	rjmp	.-10     	; 0x13a <main+0x8>
		}
		else
		{
			ul_distance = ultrasonic();
 144:	0e 94 54 00 	call	0xa8	; 0xa8 <ultrasonic>
 148:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			if (ul_distance < UL_CONDITION && waiting_condition == 1)
 150:	84 36       	cpi	r24, 0x64	; 100
 152:	91 05       	cpc	r25, r1
 154:	b4 f4       	brge	.+44     	; 0x182 <main+0x50>
 156:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <waiting_condition>
 15a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <waiting_condition+0x1>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	09 f0       	breq	.+2      	; 0x164 <main+0x32>
 162:	48 c0       	rjmp	.+144    	; 0x1f4 <main+0xc2>
			{
				crossing_condition = 1;
 164:	d0 93 63 00 	sts	0x0063, r29	; 0x800063 <crossing_condition+0x1>
 168:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <crossing_condition>
				waiting_condition = 0;
 16c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <waiting_condition+0x1>
 170:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <waiting_condition>
				t0_overflow = 0;
 174:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <t0_overflow+0x1>
 178:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <t0_overflow>
				GICR &= ~(1 << INT0);
 17c:	8b b7       	in	r24, 0x3b	; 59
 17e:	8f 7b       	andi	r24, 0xBF	; 191
 180:	8b bf       	out	0x3b, r24	; 59
			}
			
			if (crossing_condition == 1)
 182:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <crossing_condition>
 186:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <crossing_condition+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	79 f4       	brne	.+30     	; 0x1ac <main+0x7a>
			{
				ON(PORTB, BIT(RF_TXD));
 18e:	c2 9a       	sbi	0x18, 2	; 24
 190:	8d e2       	ldi	r24, 0x2D	; 45
 192:	92 e2       	ldi	r25, 0x22	; 34
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x62>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x68>
 19a:	00 00       	nop
				DELAY_3;
				OFF(PORTB, BIT(RF_TXD));
 19c:	c2 98       	cbi	0x18, 2	; 24
 19e:	8d e2       	ldi	r24, 0x2D	; 45
 1a0:	92 e2       	ldi	r25, 0x22	; 34
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x70>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x76>
 1a8:	00 00       	nop
 1aa:	c7 cf       	rjmp	.-114    	; 0x13a <main+0x8>
				DELAY_3;
			}
			else if (waiting_condition == 1)
 1ac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <waiting_condition>
 1b0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <waiting_condition+0x1>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	79 f4       	brne	.+30     	; 0x1d6 <main+0xa4>
			{
				ON(PORTB, BIT(RF_TXD));
 1b8:	c2 9a       	sbi	0x18, 2	; 24
 1ba:	87 e5       	ldi	r24, 0x57	; 87
 1bc:	9b e1       	ldi	r25, 0x1B	; 27
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x8c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x92>
 1c4:	00 00       	nop
				DELAY_2;
				OFF(PORTB, BIT(RF_TXD));
 1c6:	c2 98       	cbi	0x18, 2	; 24
 1c8:	87 e5       	ldi	r24, 0x57	; 87
 1ca:	9b e1       	ldi	r25, 0x1B	; 27
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x9a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0xa0>
 1d2:	00 00       	nop
 1d4:	b2 cf       	rjmp	.-156    	; 0x13a <main+0x8>
				DELAY_2;
			}
			else
			{
				ON(PORTB, BIT(RF_TXD));
 1d6:	c2 9a       	sbi	0x18, 2	; 24
 1d8:	87 e8       	ldi	r24, 0x87	; 135
 1da:	93 e1       	ldi	r25, 0x13	; 19
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0xaa>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0xb0>
 1e2:	00 00       	nop
				DELAY_1;
				OFF(PORTB, BIT(RF_TXD));
 1e4:	c2 98       	cbi	0x18, 2	; 24
 1e6:	87 e8       	ldi	r24, 0x87	; 135
 1e8:	93 e1       	ldi	r25, 0x13	; 19
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0xb8>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0xbe>
 1f0:	00 00       	nop
 1f2:	a3 cf       	rjmp	.-186    	; 0x13a <main+0x8>
				waiting_condition = 0;
				t0_overflow = 0;
				GICR &= ~(1 << INT0);
			}
			
			if (crossing_condition == 1)
 1f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <crossing_condition>
 1f8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <crossing_condition+0x1>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	59 f7       	brne	.-42     	; 0x1d6 <main+0xa4>
 200:	c6 cf       	rjmp	.-116    	; 0x18e <main+0x5c>

00000202 <__vector_1>:
	OFF(PORTD, BIT(U_TRIG));
	return t1_timer/58;
}

ISR(INT0_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
	if (active == 1)
 210:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <active>
 214:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <active+0x1>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	91 05       	cpc	r25, r1
 21c:	71 f4       	brne	.+28     	; 0x23a <__vector_1+0x38>
	{
		TCCR1B = 0;
 21e:	1e bc       	out	0x2e, r1	; 46
		t1_timer = TCNT1;
 220:	8c b5       	in	r24, 0x2c	; 44
 222:	9d b5       	in	r25, 0x2d	; 45
 224:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <t1_timer+0x1>
 228:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <t1_timer>
		TCNT1 = 0;
 22c:	1d bc       	out	0x2d, r1	; 45
 22e:	1c bc       	out	0x2c, r1	; 44
		active = 0;
 230:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <active+0x1>
 234:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <active>
 238:	02 c0       	rjmp	.+4      	; 0x23e <__vector_1+0x3c>
	}
	
	if (active == 0)
 23a:	89 2b       	or	r24, r25
 23c:	49 f4       	brne	.+18     	; 0x250 <__vector_1+0x4e>
	{
		TCCR1B |= (1 << CS10);
 23e:	8e b5       	in	r24, 0x2e	; 46
 240:	81 60       	ori	r24, 0x01	; 1
 242:	8e bd       	out	0x2e, r24	; 46
		active = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <active+0x1>
 24c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <active>
	}
}
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_2>:

ISR(INT1_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
	if (crossing_condition == 0 && waiting_condition == 0)
 26c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <crossing_condition>
 270:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <crossing_condition+0x1>
 274:	89 2b       	or	r24, r25
 276:	79 f4       	brne	.+30     	; 0x296 <__vector_2+0x38>
 278:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <waiting_condition>
 27c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <waiting_condition+0x1>
 280:	89 2b       	or	r24, r25
 282:	49 f4       	brne	.+18     	; 0x296 <__vector_2+0x38>
	{
		TCCR0 |= (1 << CS00 | 1 << CS02);
 284:	83 b7       	in	r24, 0x33	; 51
 286:	85 60       	ori	r24, 0x05	; 5
 288:	83 bf       	out	0x33, r24	; 51
		waiting_condition = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <waiting_condition+0x1>
 292:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <waiting_condition>
	}
	
}
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
	t0_overflow++;
 2b2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <t0_overflow>
 2b6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <t0_overflow+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <t0_overflow+0x1>
 2c0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <t0_overflow>
	
	if (t0_overflow > 38)
 2c4:	87 97       	sbiw	r24, 0x27	; 39
 2c6:	f4 f0       	brlt	.+60     	; 0x304 <__vector_11+0x60>
	{
		/*GICR |= (1 << INT1);*/
		if (waiting_condition == 1)
 2c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <waiting_condition>
 2cc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <waiting_condition+0x1>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	29 f4       	brne	.+10     	; 0x2de <__vector_11+0x3a>
			waiting_condition = 0;
 2d4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <waiting_condition+0x1>
 2d8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <waiting_condition>
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <__vector_11+0x54>
		else if (crossing_condition == 1)
 2de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <crossing_condition>
 2e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <crossing_condition+0x1>
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	39 f4       	brne	.+14     	; 0x2f8 <__vector_11+0x54>
		{
			crossing_condition = 0;
 2ea:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <crossing_condition+0x1>
 2ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <crossing_condition>
			GICR |= (1 << INT0);
 2f2:	8b b7       	in	r24, 0x3b	; 59
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	8b bf       	out	0x3b, r24	; 59
		}
		TCCR0 = 0;
 2f8:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0;
 2fa:	12 be       	out	0x32, r1	; 50
		t0_overflow = 0;
 2fc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <t0_overflow+0x1>
 300:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <t0_overflow>
	}
}
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__divmodhi4>:
 312:	97 fb       	bst	r25, 7
 314:	07 2e       	mov	r0, r23
 316:	16 f4       	brtc	.+4      	; 0x31c <__divmodhi4+0xa>
 318:	00 94       	com	r0
 31a:	07 d0       	rcall	.+14     	; 0x32a <__divmodhi4_neg1>
 31c:	77 fd       	sbrc	r23, 7
 31e:	09 d0       	rcall	.+18     	; 0x332 <__divmodhi4_neg2>
 320:	0e 94 9d 01 	call	0x33a	; 0x33a <__udivmodhi4>
 324:	07 fc       	sbrc	r0, 7
 326:	05 d0       	rcall	.+10     	; 0x332 <__divmodhi4_neg2>
 328:	3e f4       	brtc	.+14     	; 0x338 <__divmodhi4_exit>

0000032a <__divmodhi4_neg1>:
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__divmodhi4_neg2>:
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255

00000338 <__divmodhi4_exit>:
 338:	08 95       	ret

0000033a <__udivmodhi4>:
 33a:	aa 1b       	sub	r26, r26
 33c:	bb 1b       	sub	r27, r27
 33e:	51 e1       	ldi	r21, 0x11	; 17
 340:	07 c0       	rjmp	.+14     	; 0x350 <__udivmodhi4_ep>

00000342 <__udivmodhi4_loop>:
 342:	aa 1f       	adc	r26, r26
 344:	bb 1f       	adc	r27, r27
 346:	a6 17       	cp	r26, r22
 348:	b7 07       	cpc	r27, r23
 34a:	10 f0       	brcs	.+4      	; 0x350 <__udivmodhi4_ep>
 34c:	a6 1b       	sub	r26, r22
 34e:	b7 0b       	sbc	r27, r23

00000350 <__udivmodhi4_ep>:
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	5a 95       	dec	r21
 356:	a9 f7       	brne	.-22     	; 0x342 <__udivmodhi4_loop>
 358:	80 95       	com	r24
 35a:	90 95       	com	r25
 35c:	bc 01       	movw	r22, r24
 35e:	cd 01       	movw	r24, r26
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
