
Pedestrian Communication v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800064  00800064  000007d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ba  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047c  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a2  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_1>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  8a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <system_setup>:
	}
}

void system_setup(void)
{
	DDRB |= (1 << GREEN | 1 << YELLOW | 1 << RED | 1 << BUZZER);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8f 60       	ori	r24, 0x0F	; 15
  96:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << ULTRASONIC | 1 << IR_CROSSING | 1 << CONFIG);
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8f 74       	andi	r24, 0x4F	; 79
  9c:	87 bb       	out	0x17, r24	; 23
	
	OFF(PORTB, BIT(BUZZER));
  9e:	c3 98       	cbi	0x18, 3	; 24
	ON(PORTB, BIT(CONFIG));
  a0:	c7 9a       	sbi	0x18, 7	; 24
	
	DDRD &= ~(1 << IR_ENTRY | 1 << IR_EXIT);
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	83 7f       	andi	r24, 0xF3	; 243
  a6:	81 bb       	out	0x11, r24	; 17
	
	GICR |= (1 << INT0 | 1 << INT1);
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 6c       	ori	r24, 0xC0	; 192
  ac:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01 | 1 << ISC11);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	8a 60       	ori	r24, 0x0A	; 10
  b2:	85 bf       	out	0x35, r24	; 53
	TIMSK |= (1 << TOIE0);
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	89 bf       	out	0x39, r24	; 57
	
	sei(); //Enabling Global Interrupts
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <beeping>:
	
}

void beeping(int mode)
{
	if (mode == 1)
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	a9 f4       	brne	.+42     	; 0xee <beeping+0x30>
	{
		ON(PORTB, BIT(BUZZER));
  c4:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e3       	ldi	r18, 0x3F	; 63
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <beeping+0xe>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <beeping+0x18>
  d6:	00 00       	nop
		_delay_ms(1000);
		OFF(PORTB, BIT(BUZZER));
  d8:	c3 98       	cbi	0x18, 3	; 24
  da:	2f e3       	ldi	r18, 0x3F	; 63
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <beeping+0x22>
  e8:	00 c0       	rjmp	.+0      	; 0xea <beeping+0x2c>
  ea:	00 00       	nop
  ec:	08 95       	ret
		_delay_ms(1000);
	}
	else if (mode == 2)
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	91 05       	cpc	r25, r1
  f2:	79 f4       	brne	.+30     	; 0x112 <beeping+0x54>
	{
		ON(PORTB, BIT(BUZZER));
  f4:	c3 9a       	sbi	0x18, 3	; 24
  f6:	83 e2       	ldi	r24, 0x23	; 35
  f8:	94 ef       	ldi	r25, 0xF4	; 244
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <beeping+0x3c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <beeping+0x42>
 100:	00 00       	nop
		_delay_ms(250);
		OFF(PORTB, BIT(BUZZER));
 102:	c3 98       	cbi	0x18, 3	; 24
 104:	83 e2       	ldi	r24, 0x23	; 35
 106:	94 ef       	ldi	r25, 0xF4	; 244
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <beeping+0x4a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <beeping+0x50>
 10e:	00 00       	nop
 110:	08 95       	ret
		_delay_ms(250);
	}
	else if (mode == 3)
 112:	03 97       	sbiw	r24, 0x03	; 3
 114:	09 f4       	brne	.+2      	; 0x118 <beeping+0x5a>
	{
		ON(PORTB, BIT(BUZZER));
 116:	c3 9a       	sbi	0x18, 3	; 24
 118:	08 95       	ret

0000011a <config_system>:
	
	sei(); //Enabling Global Interrupts
}

void config_system(void)
{
 11a:	25 e0       	ldi	r18, 0x05	; 5
 11c:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	//Checking Buzzer and LEDs
	for (i = 0; i < 5; i++)
	{
		ON(PORTB, 0x7);
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	87 60       	ori	r24, 0x07	; 7
 122:	88 bb       	out	0x18, r24	; 24
 124:	87 ea       	ldi	r24, 0xA7	; 167
 126:	91 e6       	ldi	r25, 0x61	; 97
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <config_system+0xe>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <config_system+0x14>
 12e:	00 00       	nop
		_delay_ms(100);
		OFF(PORTB, 0x7);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 bb       	out	0x18, r24	; 24
 136:	87 ea       	ldi	r24, 0xA7	; 167
 138:	91 e6       	ldi	r25, 0x61	; 97
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <config_system+0x20>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <config_system+0x26>
 140:	00 00       	nop
 142:	21 50       	subi	r18, 0x01	; 1
 144:	31 09       	sbc	r19, r1

void config_system(void)
{
	int i;
	//Checking Buzzer and LEDs
	for (i = 0; i < 5; i++)
 146:	59 f7       	brne	.-42     	; 0x11e <config_system+0x4>
		_delay_ms(100);
		OFF(PORTB, 0x7);
		_delay_ms(100);
	}
	
	beeping(1);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 5f 00 	call	0xbe	; 0xbe <beeping>
	beeping(2);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 5f 00 	call	0xbe	; 0xbe <beeping>
	
	while (BIT_OFF(PINB, CONFIG))
 158:	10 c0       	rjmp	.+32     	; 0x17a <config_system+0x60>
	{
		if (BIT_OFF(PINB, ULTRASONIC))
 15a:	b4 99       	sbic	0x16, 4	; 22
 15c:	03 c0       	rjmp	.+6      	; 0x164 <config_system+0x4a>
		{
			ON(PORTB, BIT(YELLOW));
 15e:	c1 9a       	sbi	0x18, 1	; 24
			OFF(PORTB, BIT(GREEN));
 160:	c0 98       	cbi	0x18, 0	; 24
 162:	02 c0       	rjmp	.+4      	; 0x168 <config_system+0x4e>
		}
		else
		{
			ON(PORTB, BIT(GREEN));
 164:	c0 9a       	sbi	0x18, 0	; 24
			OFF(PORTB, BIT(YELLOW));
 166:	c1 98       	cbi	0x18, 1	; 24
		}
		
		if (BIT_OFF(PIND, IR_ENTRY) || BIT_OFF(PIND, IR_EXIT) || BIT_OFF(PINB, IR_CROSSING))
 168:	82 9b       	sbis	0x10, 2	; 16
 16a:	04 c0       	rjmp	.+8      	; 0x174 <config_system+0x5a>
 16c:	83 9b       	sbis	0x10, 3	; 16
 16e:	02 c0       	rjmp	.+4      	; 0x174 <config_system+0x5a>
 170:	b5 99       	sbic	0x16, 5	; 22
 172:	02 c0       	rjmp	.+4      	; 0x178 <config_system+0x5e>
			ON(PORTB, BIT(RED));
 174:	c2 9a       	sbi	0x18, 2	; 24
 176:	01 c0       	rjmp	.+2      	; 0x17a <config_system+0x60>
		else
			OFF(PORTB, BIT(RED));
 178:	c2 98       	cbi	0x18, 2	; 24
	}
	
	beeping(1);
	beeping(2);
	
	while (BIT_OFF(PINB, CONFIG))
 17a:	b7 9b       	sbis	0x16, 7	; 22
 17c:	ee cf       	rjmp	.-36     	; 0x15a <config_system+0x40>
			ON(PORTB, BIT(RED));
		else
			OFF(PORTB, BIT(RED));
	}
	
	OFF(PORTB, 0x7);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	88 7f       	andi	r24, 0xF8	; 248
 182:	88 bb       	out	0x18, r24	; 24
	OFF(PORTB, BIT(BUZZER));
 184:	c3 98       	cbi	0x18, 3	; 24
 186:	08 95       	ret

00000188 <main>:
float speed = 0;


int main(void)
{
	system_setup();
 188:	0e 94 49 00 	call	0x92	; 0x92 <system_setup>
	while (1)
	{
		if (BIT_OFF(PINB, CONFIG))
 18c:	b7 99       	sbic	0x16, 7	; 22
 18e:	03 c0       	rjmp	.+6      	; 0x196 <main+0xe>
			config_system();
 190:	0e 94 8d 00 	call	0x11a	; 0x11a <config_system>
 194:	fb cf       	rjmp	.-10     	; 0x18c <main+0x4>
		else
		{
			if (speed > 0)
 196:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <__data_end>
 19a:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <__data_end+0x1>
 19e:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <__data_end+0x2>
 1a2:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <__data_end+0x3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	a9 01       	movw	r20, r18
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 2c 03 	call	0x658	; 0x658 <__gesf2>
 1b4:	18 16       	cp	r1, r24
 1b6:	f4 f5       	brge	.+124    	; 0x234 <main+0xac>
			{
				if (speed < 60)
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e7       	ldi	r20, 0x70	; 112
 1be:	52 e4       	ldi	r21, 0x42	; 66
 1c0:	c7 01       	movw	r24, r14
 1c2:	b6 01       	movw	r22, r12
 1c4:	0e 94 cd 01 	call	0x39a	; 0x39a <__cmpsf2>
 1c8:	88 23       	and	r24, r24
 1ca:	5c f5       	brge	.+86     	; 0x222 <main+0x9a>
				{
					ON(PORTB, BIT(YELLOW));
 1cc:	c1 9a       	sbi	0x18, 1	; 24
					OFF(PORTB, NOTYELLOW);
 1ce:	88 b3       	in	r24, 0x18	; 24
 1d0:	8a 7f       	andi	r24, 0xFA	; 250
 1d2:	88 bb       	out	0x18, r24	; 24
					if (speed < 30)
 1d4:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <__data_end>
 1d8:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <__data_end+0x1>
 1dc:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <__data_end+0x2>
 1e0:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <__data_end+0x3>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 ef       	ldi	r20, 0xF0	; 240
 1ea:	51 e4       	ldi	r21, 0x41	; 65
 1ec:	c7 01       	movw	r24, r14
 1ee:	b6 01       	movw	r22, r12
 1f0:	0e 94 cd 01 	call	0x39a	; 0x39a <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	2c f4       	brge	.+10     	; 0x202 <main+0x7a>
						beeping(1);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 5f 00 	call	0xbe	; 0xbe <beeping>
 200:	c5 cf       	rjmp	.-118    	; 0x18c <main+0x4>
					else if (speed < 60)
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e7       	ldi	r20, 0x70	; 112
 208:	52 e4       	ldi	r21, 0x42	; 66
 20a:	c7 01       	movw	r24, r14
 20c:	b6 01       	movw	r22, r12
 20e:	0e 94 cd 01 	call	0x39a	; 0x39a <__cmpsf2>
 212:	88 23       	and	r24, r24
 214:	0c f0       	brlt	.+2      	; 0x218 <main+0x90>
 216:	ba cf       	rjmp	.-140    	; 0x18c <main+0x4>
						beeping(2);
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 5f 00 	call	0xbe	; 0xbe <beeping>
 220:	b5 cf       	rjmp	.-150    	; 0x18c <main+0x4>
				}
				else
				{
					ON(PORTB, BIT(RED));
 222:	c2 9a       	sbi	0x18, 2	; 24
					OFF(PORTB, NOTRED);
 224:	88 b3       	in	r24, 0x18	; 24
 226:	8c 7f       	andi	r24, 0xFC	; 252
 228:	88 bb       	out	0x18, r24	; 24
					beeping(3);
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 5f 00 	call	0xbe	; 0xbe <beeping>
 232:	ac cf       	rjmp	.-168    	; 0x18c <main+0x4>
				}
			}
			else
			{
				ON(PORTB, BIT(GREEN));
 234:	c0 9a       	sbi	0x18, 0	; 24
				OFF(PORTB, NOTGREEN);
 236:	88 b3       	in	r24, 0x18	; 24
 238:	89 7f       	andi	r24, 0xF9	; 249
 23a:	88 bb       	out	0x18, r24	; 24
				OFF(PORTB, BIT(BUZZER));
 23c:	c3 98       	cbi	0x18, 3	; 24
 23e:	a6 cf       	rjmp	.-180    	; 0x18c <main+0x4>

00000240 <__vector_1>:
	}
}


ISR(INT0_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
	TCCR1B |= (1 << CS10 | 1 << CS12);
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	85 60       	ori	r24, 0x05	; 5
 252:	8e bd       	out	0x2e, r24	; 46
	detecting = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <detecting+0x1>
 25c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <detecting>
}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_2>:

ISR(INT1_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	if (detecting == 1)
 290:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <detecting>
 294:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <detecting+0x1>
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <__vector_2+0x30>
 29c:	3f c0       	rjmp	.+126    	; 0x31c <__vector_2+0xae>
	{
		TCCR1B = 0;
 29e:	1e bc       	out	0x2e, r1	; 46
		t1_timer = TCNT1 * 1.024;
 2a0:	6c b5       	in	r22, 0x2c	; 44
 2a2:	7d b5       	in	r23, 0x2d	; 45
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__floatunsisf>
 2ac:	2f e6       	ldi	r18, 0x6F	; 111
 2ae:	32 e1       	ldi	r19, 0x12	; 18
 2b0:	43 e8       	ldi	r20, 0x83	; 131
 2b2:	5f e3       	ldi	r21, 0x3F	; 63
 2b4:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3>
 2b8:	0e 94 44 02 	call	0x488	; 0x488 <__fixsfsi>
 2bc:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <t1_timer+0x1>
 2c0:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <t1_timer>
		speed = (ir_distance/t1_timer) * 3600;
 2c4:	07 2e       	mov	r0, r23
 2c6:	00 0c       	add	r0, r0
 2c8:	88 0b       	sbc	r24, r24
 2ca:	99 0b       	sbc	r25, r25
 2cc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__floatsisf>
 2d0:	9b 01       	movw	r18, r22
 2d2:	ac 01       	movw	r20, r24
 2d4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2e4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__divsf3>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	41 e6       	ldi	r20, 0x61	; 97
 2ee:	55 e4       	ldi	r21, 0x45	; 69
 2f0:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3>
 2f4:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_end>
 2f8:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_end+0x1>
 2fc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end+0x2>
 300:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x3>
		TCNT1 = 0;
 304:	1d bc       	out	0x2d, r1	; 45
 306:	1c bc       	out	0x2c, r1	; 44
		detecting = 0;
 308:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <detecting+0x1>
 30c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <detecting>
		TCCR0 |= (1 << CS00 | 1 << CS02);
 310:	83 b7       	in	r24, 0x33	; 51
 312:	85 60       	ori	r24, 0x05	; 5
 314:	83 bf       	out	0x33, r24	; 51
		GICR &= ~(1 << INT0 | 1 << INT1);
 316:	8b b7       	in	r24, 0x3b	; 59
 318:	8f 73       	andi	r24, 0x3F	; 63
 31a:	8b bf       	out	0x3b, r24	; 59
	}
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
	t0_overflow++;
 34c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <t0_overflow>
 350:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <t0_overflow+0x1>
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <t0_overflow+0x1>
 35a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <t0_overflow>
	
	if (t0_overflow > OVERFLOW_COUNT(10))
 35e:	87 97       	sbiw	r24, 0x27	; 39
 360:	ac f0       	brlt	.+42     	; 0x38c <__vector_11+0x4e>
	{
		TCCR0 = 0;
 362:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0;
 364:	12 be       	out	0x32, r1	; 50
		t0_overflow = 0;
 366:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <t0_overflow+0x1>
 36a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <t0_overflow>
		speed = 0;
 36e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 372:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 376:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end+0x2>
 37a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x3>
		t1_timer = 0;
 37e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <t1_timer+0x1>
 382:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <t1_timer>
		GICR |= (1 << INT0 | 1 << INT1);
 386:	8b b7       	in	r24, 0x3b	; 59
 388:	80 6c       	ori	r24, 0xC0	; 192
 38a:	8b bf       	out	0x3b, r24	; 59
	}
}
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__cmpsf2>:
 39a:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_cmp>
 39e:	08 f4       	brcc	.+2      	; 0x3a2 <__cmpsf2+0x8>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	08 95       	ret

000003a4 <__divsf3>:
 3a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__divsf3x>
 3a8:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__fp_round>
 3ac:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_pscB>
 3b0:	58 f0       	brcs	.+22     	; 0x3c8 <__divsf3+0x24>
 3b2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscA>
 3b6:	40 f0       	brcs	.+16     	; 0x3c8 <__divsf3+0x24>
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <__divsf3+0x20>
 3ba:	5f 3f       	cpi	r21, 0xFF	; 255
 3bc:	29 f0       	breq	.+10     	; 0x3c8 <__divsf3+0x24>
 3be:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_inf>
 3c2:	51 11       	cpse	r21, r1
 3c4:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>
 3c8:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_nan>

000003cc <__divsf3x>:
 3cc:	0e 94 03 03 	call	0x606	; 0x606 <__fp_split3>
 3d0:	68 f3       	brcs	.-38     	; 0x3ac <__divsf3+0x8>

000003d2 <__divsf3_pse>:
 3d2:	99 23       	and	r25, r25
 3d4:	b1 f3       	breq	.-20     	; 0x3c2 <__divsf3+0x1e>
 3d6:	55 23       	and	r21, r21
 3d8:	91 f3       	breq	.-28     	; 0x3be <__divsf3+0x1a>
 3da:	95 1b       	sub	r25, r21
 3dc:	55 0b       	sbc	r21, r21
 3de:	bb 27       	eor	r27, r27
 3e0:	aa 27       	eor	r26, r26
 3e2:	62 17       	cp	r22, r18
 3e4:	73 07       	cpc	r23, r19
 3e6:	84 07       	cpc	r24, r20
 3e8:	38 f0       	brcs	.+14     	; 0x3f8 <__divsf3_pse+0x26>
 3ea:	9f 5f       	subi	r25, 0xFF	; 255
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	44 1f       	adc	r20, r20
 3f4:	aa 1f       	adc	r26, r26
 3f6:	a9 f3       	breq	.-22     	; 0x3e2 <__divsf3_pse+0x10>
 3f8:	35 d0       	rcall	.+106    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 3fa:	0e 2e       	mov	r0, r30
 3fc:	3a f0       	brmi	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	e0 e8       	ldi	r30, 0x80	; 128
 400:	32 d0       	rcall	.+100    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 402:	91 50       	subi	r25, 0x01	; 1
 404:	50 40       	sbci	r21, 0x00	; 0
 406:	e6 95       	lsr	r30
 408:	00 1c       	adc	r0, r0
 40a:	ca f7       	brpl	.-14     	; 0x3fe <__divsf3_pse+0x2c>
 40c:	2b d0       	rcall	.+86     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 40e:	fe 2f       	mov	r31, r30
 410:	29 d0       	rcall	.+82     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	bb 1f       	adc	r27, r27
 41a:	26 17       	cp	r18, r22
 41c:	37 07       	cpc	r19, r23
 41e:	48 07       	cpc	r20, r24
 420:	ab 07       	cpc	r26, r27
 422:	b0 e8       	ldi	r27, 0x80	; 128
 424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	bb 0b       	sbc	r27, r27
 428:	80 2d       	mov	r24, r0
 42a:	bf 01       	movw	r22, r30
 42c:	ff 27       	eor	r31, r31
 42e:	93 58       	subi	r25, 0x83	; 131
 430:	5f 4f       	sbci	r21, 0xFF	; 255
 432:	3a f0       	brmi	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 434:	9e 3f       	cpi	r25, 0xFE	; 254
 436:	51 05       	cpc	r21, r1
 438:	78 f0       	brcs	.+30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43a:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_inf>
 43e:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	e4 f3       	brlt	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	98 3e       	cpi	r25, 0xE8	; 232
 448:	d4 f3       	brlt	.-12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f7 95       	ror	r31
 454:	9f 5f       	subi	r25, 0xFF	; 255
 456:	c9 f7       	brne	.-14     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret
 464:	e1 e0       	ldi	r30, 0x01	; 1
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	bb 1f       	adc	r27, r27
 46e:	62 17       	cp	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	ba 07       	cpc	r27, r26
 476:	20 f0       	brcs	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 478:	62 1b       	sub	r22, r18
 47a:	73 0b       	sbc	r23, r19
 47c:	84 0b       	sbc	r24, r20
 47e:	ba 0b       	sbc	r27, r26
 480:	ee 1f       	adc	r30, r30
 482:	88 f7       	brcc	.-30     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 484:	e0 95       	com	r30
 486:	08 95       	ret

00000488 <__fixsfsi>:
 488:	0e 94 4b 02 	call	0x496	; 0x496 <__fixunssfsi>
 48c:	68 94       	set
 48e:	b1 11       	cpse	r27, r1
 490:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>
 494:	08 95       	ret

00000496 <__fixunssfsi>:
 496:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_splitA>
 49a:	88 f0       	brcs	.+34     	; 0x4be <__fixunssfsi+0x28>
 49c:	9f 57       	subi	r25, 0x7F	; 127
 49e:	98 f0       	brcs	.+38     	; 0x4c6 <__fixunssfsi+0x30>
 4a0:	b9 2f       	mov	r27, r25
 4a2:	99 27       	eor	r25, r25
 4a4:	b7 51       	subi	r27, 0x17	; 23
 4a6:	b0 f0       	brcs	.+44     	; 0x4d4 <__fixunssfsi+0x3e>
 4a8:	e1 f0       	breq	.+56     	; 0x4e2 <__fixunssfsi+0x4c>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	1a f0       	brmi	.+6      	; 0x4ba <__fixunssfsi+0x24>
 4b4:	ba 95       	dec	r27
 4b6:	c9 f7       	brne	.-14     	; 0x4aa <__fixunssfsi+0x14>
 4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <__fixunssfsi+0x4c>
 4ba:	b1 30       	cpi	r27, 0x01	; 1
 4bc:	91 f0       	breq	.+36     	; 0x4e2 <__fixunssfsi+0x4c>
 4be:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_zero>
 4c2:	b1 e0       	ldi	r27, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_zero>
 4ca:	67 2f       	mov	r22, r23
 4cc:	78 2f       	mov	r23, r24
 4ce:	88 27       	eor	r24, r24
 4d0:	b8 5f       	subi	r27, 0xF8	; 248
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__fixunssfsi+0x4c>
 4d4:	b9 3f       	cpi	r27, 0xF9	; 249
 4d6:	cc f3       	brlt	.-14     	; 0x4ca <__fixunssfsi+0x34>
 4d8:	86 95       	lsr	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b3 95       	inc	r27
 4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__fixunssfsi+0x42>
 4e2:	3e f4       	brtc	.+14     	; 0x4f2 <__fixunssfsi+0x5c>
 4e4:	90 95       	com	r25
 4e6:	80 95       	com	r24
 4e8:	70 95       	com	r23
 4ea:	61 95       	neg	r22
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	08 95       	ret

000004f4 <__floatunsisf>:
 4f4:	e8 94       	clt
 4f6:	09 c0       	rjmp	.+18     	; 0x50a <__floatsisf+0x12>

000004f8 <__floatsisf>:
 4f8:	97 fb       	bst	r25, 7
 4fa:	3e f4       	brtc	.+14     	; 0x50a <__floatsisf+0x12>
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	99 23       	and	r25, r25
 50c:	a9 f0       	breq	.+42     	; 0x538 <__floatsisf+0x40>
 50e:	f9 2f       	mov	r31, r25
 510:	96 e9       	ldi	r25, 0x96	; 150
 512:	bb 27       	eor	r27, r27
 514:	93 95       	inc	r25
 516:	f6 95       	lsr	r31
 518:	87 95       	ror	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f1 11       	cpse	r31, r1
 522:	f8 cf       	rjmp	.-16     	; 0x514 <__floatsisf+0x1c>
 524:	fa f4       	brpl	.+62     	; 0x564 <__floatsisf+0x6c>
 526:	bb 0f       	add	r27, r27
 528:	11 f4       	brne	.+4      	; 0x52e <__floatsisf+0x36>
 52a:	60 ff       	sbrs	r22, 0
 52c:	1b c0       	rjmp	.+54     	; 0x564 <__floatsisf+0x6c>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	16 c0       	rjmp	.+44     	; 0x564 <__floatsisf+0x6c>
 538:	88 23       	and	r24, r24
 53a:	11 f0       	breq	.+4      	; 0x540 <__floatsisf+0x48>
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	11 c0       	rjmp	.+34     	; 0x562 <__floatsisf+0x6a>
 540:	77 23       	and	r23, r23
 542:	21 f0       	breq	.+8      	; 0x54c <__floatsisf+0x54>
 544:	9e e8       	ldi	r25, 0x8E	; 142
 546:	87 2f       	mov	r24, r23
 548:	76 2f       	mov	r23, r22
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__floatsisf+0x5e>
 54c:	66 23       	and	r22, r22
 54e:	71 f0       	breq	.+28     	; 0x56c <__floatsisf+0x74>
 550:	96 e8       	ldi	r25, 0x86	; 134
 552:	86 2f       	mov	r24, r22
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	2a f0       	brmi	.+10     	; 0x564 <__floatsisf+0x6c>
 55a:	9a 95       	dec	r25
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	da f7       	brpl	.-10     	; 0x55a <__floatsisf+0x62>
 564:	88 0f       	add	r24, r24
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	97 f9       	bld	r25, 7
 56c:	08 95       	ret

0000056e <__fp_cmp>:
 56e:	99 0f       	add	r25, r25
 570:	00 08       	sbc	r0, r0
 572:	55 0f       	add	r21, r21
 574:	aa 0b       	sbc	r26, r26
 576:	e0 e8       	ldi	r30, 0x80	; 128
 578:	fe ef       	ldi	r31, 0xFE	; 254
 57a:	16 16       	cp	r1, r22
 57c:	17 06       	cpc	r1, r23
 57e:	e8 07       	cpc	r30, r24
 580:	f9 07       	cpc	r31, r25
 582:	c0 f0       	brcs	.+48     	; 0x5b4 <__fp_cmp+0x46>
 584:	12 16       	cp	r1, r18
 586:	13 06       	cpc	r1, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	98 f0       	brcs	.+38     	; 0x5b4 <__fp_cmp+0x46>
 58e:	62 1b       	sub	r22, r18
 590:	73 0b       	sbc	r23, r19
 592:	84 0b       	sbc	r24, r20
 594:	95 0b       	sbc	r25, r21
 596:	39 f4       	brne	.+14     	; 0x5a6 <__fp_cmp+0x38>
 598:	0a 26       	eor	r0, r26
 59a:	61 f0       	breq	.+24     	; 0x5b4 <__fp_cmp+0x46>
 59c:	23 2b       	or	r18, r19
 59e:	24 2b       	or	r18, r20
 5a0:	25 2b       	or	r18, r21
 5a2:	21 f4       	brne	.+8      	; 0x5ac <__fp_cmp+0x3e>
 5a4:	08 95       	ret
 5a6:	0a 26       	eor	r0, r26
 5a8:	09 f4       	brne	.+2      	; 0x5ac <__fp_cmp+0x3e>
 5aa:	a1 40       	sbci	r26, 0x01	; 1
 5ac:	a6 95       	lsr	r26
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	81 1d       	adc	r24, r1
 5b2:	81 1d       	adc	r24, r1
 5b4:	08 95       	ret

000005b6 <__fp_inf>:
 5b6:	97 f9       	bld	r25, 7
 5b8:	9f 67       	ori	r25, 0x7F	; 127
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	08 95       	ret

000005c2 <__fp_nan>:
 5c2:	9f ef       	ldi	r25, 0xFF	; 255
 5c4:	80 ec       	ldi	r24, 0xC0	; 192
 5c6:	08 95       	ret

000005c8 <__fp_pscA>:
 5c8:	00 24       	eor	r0, r0
 5ca:	0a 94       	dec	r0
 5cc:	16 16       	cp	r1, r22
 5ce:	17 06       	cpc	r1, r23
 5d0:	18 06       	cpc	r1, r24
 5d2:	09 06       	cpc	r0, r25
 5d4:	08 95       	ret

000005d6 <__fp_pscB>:
 5d6:	00 24       	eor	r0, r0
 5d8:	0a 94       	dec	r0
 5da:	12 16       	cp	r1, r18
 5dc:	13 06       	cpc	r1, r19
 5de:	14 06       	cpc	r1, r20
 5e0:	05 06       	cpc	r0, r21
 5e2:	08 95       	ret

000005e4 <__fp_round>:
 5e4:	09 2e       	mov	r0, r25
 5e6:	03 94       	inc	r0
 5e8:	00 0c       	add	r0, r0
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <__fp_round+0xc>
 5ec:	88 23       	and	r24, r24
 5ee:	52 f0       	brmi	.+20     	; 0x604 <__fp_round+0x20>
 5f0:	bb 0f       	add	r27, r27
 5f2:	40 f4       	brcc	.+16     	; 0x604 <__fp_round+0x20>
 5f4:	bf 2b       	or	r27, r31
 5f6:	11 f4       	brne	.+4      	; 0x5fc <__fp_round+0x18>
 5f8:	60 ff       	sbrs	r22, 0
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <__fp_round+0x20>
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	08 95       	ret

00000606 <__fp_split3>:
 606:	57 fd       	sbrc	r21, 7
 608:	90 58       	subi	r25, 0x80	; 128
 60a:	44 0f       	add	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	59 f0       	breq	.+22     	; 0x626 <__fp_splitA+0x10>
 610:	5f 3f       	cpi	r21, 0xFF	; 255
 612:	71 f0       	breq	.+28     	; 0x630 <__fp_splitA+0x1a>
 614:	47 95       	ror	r20

00000616 <__fp_splitA>:
 616:	88 0f       	add	r24, r24
 618:	97 fb       	bst	r25, 7
 61a:	99 1f       	adc	r25, r25
 61c:	61 f0       	breq	.+24     	; 0x636 <__fp_splitA+0x20>
 61e:	9f 3f       	cpi	r25, 0xFF	; 255
 620:	79 f0       	breq	.+30     	; 0x640 <__fp_splitA+0x2a>
 622:	87 95       	ror	r24
 624:	08 95       	ret
 626:	12 16       	cp	r1, r18
 628:	13 06       	cpc	r1, r19
 62a:	14 06       	cpc	r1, r20
 62c:	55 1f       	adc	r21, r21
 62e:	f2 cf       	rjmp	.-28     	; 0x614 <__fp_split3+0xe>
 630:	46 95       	lsr	r20
 632:	f1 df       	rcall	.-30     	; 0x616 <__fp_splitA>
 634:	08 c0       	rjmp	.+16     	; 0x646 <__fp_splitA+0x30>
 636:	16 16       	cp	r1, r22
 638:	17 06       	cpc	r1, r23
 63a:	18 06       	cpc	r1, r24
 63c:	99 1f       	adc	r25, r25
 63e:	f1 cf       	rjmp	.-30     	; 0x622 <__fp_splitA+0xc>
 640:	86 95       	lsr	r24
 642:	71 05       	cpc	r23, r1
 644:	61 05       	cpc	r22, r1
 646:	08 94       	sec
 648:	08 95       	ret

0000064a <__fp_zero>:
 64a:	e8 94       	clt

0000064c <__fp_szero>:
 64c:	bb 27       	eor	r27, r27
 64e:	66 27       	eor	r22, r22
 650:	77 27       	eor	r23, r23
 652:	cb 01       	movw	r24, r22
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret

00000658 <__gesf2>:
 658:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_cmp>
 65c:	08 f4       	brcc	.+2      	; 0x660 <__gesf2+0x8>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	08 95       	ret

00000662 <__mulsf3>:
 662:	0e 94 44 03 	call	0x688	; 0x688 <__mulsf3x>
 666:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__fp_round>
 66a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscA>
 66e:	38 f0       	brcs	.+14     	; 0x67e <__mulsf3+0x1c>
 670:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_pscB>
 674:	20 f0       	brcs	.+8      	; 0x67e <__mulsf3+0x1c>
 676:	95 23       	and	r25, r21
 678:	11 f0       	breq	.+4      	; 0x67e <__mulsf3+0x1c>
 67a:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_inf>
 67e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_nan>
 682:	11 24       	eor	r1, r1
 684:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>

00000688 <__mulsf3x>:
 688:	0e 94 03 03 	call	0x606	; 0x606 <__fp_split3>
 68c:	70 f3       	brcs	.-36     	; 0x66a <__mulsf3+0x8>

0000068e <__mulsf3_pse>:
 68e:	95 9f       	mul	r25, r21
 690:	c1 f3       	breq	.-16     	; 0x682 <__mulsf3+0x20>
 692:	95 0f       	add	r25, r21
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	55 1f       	adc	r21, r21
 698:	62 9f       	mul	r22, r18
 69a:	f0 01       	movw	r30, r0
 69c:	72 9f       	mul	r23, r18
 69e:	bb 27       	eor	r27, r27
 6a0:	f0 0d       	add	r31, r0
 6a2:	b1 1d       	adc	r27, r1
 6a4:	63 9f       	mul	r22, r19
 6a6:	aa 27       	eor	r26, r26
 6a8:	f0 0d       	add	r31, r0
 6aa:	b1 1d       	adc	r27, r1
 6ac:	aa 1f       	adc	r26, r26
 6ae:	64 9f       	mul	r22, r20
 6b0:	66 27       	eor	r22, r22
 6b2:	b0 0d       	add	r27, r0
 6b4:	a1 1d       	adc	r26, r1
 6b6:	66 1f       	adc	r22, r22
 6b8:	82 9f       	mul	r24, r18
 6ba:	22 27       	eor	r18, r18
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	62 1f       	adc	r22, r18
 6c2:	73 9f       	mul	r23, r19
 6c4:	b0 0d       	add	r27, r0
 6c6:	a1 1d       	adc	r26, r1
 6c8:	62 1f       	adc	r22, r18
 6ca:	83 9f       	mul	r24, r19
 6cc:	a0 0d       	add	r26, r0
 6ce:	61 1d       	adc	r22, r1
 6d0:	22 1f       	adc	r18, r18
 6d2:	74 9f       	mul	r23, r20
 6d4:	33 27       	eor	r19, r19
 6d6:	a0 0d       	add	r26, r0
 6d8:	61 1d       	adc	r22, r1
 6da:	23 1f       	adc	r18, r19
 6dc:	84 9f       	mul	r24, r20
 6de:	60 0d       	add	r22, r0
 6e0:	21 1d       	adc	r18, r1
 6e2:	82 2f       	mov	r24, r18
 6e4:	76 2f       	mov	r23, r22
 6e6:	6a 2f       	mov	r22, r26
 6e8:	11 24       	eor	r1, r1
 6ea:	9f 57       	subi	r25, 0x7F	; 127
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	9a f0       	brmi	.+38     	; 0x716 <__mulsf3_pse+0x88>
 6f0:	f1 f0       	breq	.+60     	; 0x72e <__mulsf3_pse+0xa0>
 6f2:	88 23       	and	r24, r24
 6f4:	4a f0       	brmi	.+18     	; 0x708 <__mulsf3_pse+0x7a>
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__mulsf3_pse+0x64>
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	51 05       	cpc	r21, r1
 70c:	80 f0       	brcs	.+32     	; 0x72e <__mulsf3_pse+0xa0>
 70e:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_inf>
 712:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_szero>
 716:	5f 3f       	cpi	r21, 0xFF	; 255
 718:	e4 f3       	brlt	.-8      	; 0x712 <__mulsf3_pse+0x84>
 71a:	98 3e       	cpi	r25, 0xE8	; 232
 71c:	d4 f3       	brlt	.-12     	; 0x712 <__mulsf3_pse+0x84>
 71e:	86 95       	lsr	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b7 95       	ror	r27
 726:	f7 95       	ror	r31
 728:	e7 95       	ror	r30
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	c1 f7       	brne	.-16     	; 0x71e <__mulsf3_pse+0x90>
 72e:	fe 2b       	or	r31, r30
 730:	88 0f       	add	r24, r24
 732:	91 1d       	adc	r25, r1
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
